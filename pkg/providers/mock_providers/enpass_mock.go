// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/providers/enpass.go

// Package mock_providers is a generated GoMock package.
package mock_providers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	enpass "github.com/v-braun/enpass-cli/pkg/enpass"
)

// MockEnpassClient is a mock of EnpassClient interface.
type MockEnpassClient struct {
	ctrl     *gomock.Controller
	recorder *MockEnpassClientMockRecorder
}

// MockEnpassClientMockRecorder is the mock recorder for MockEnpassClient.
type MockEnpassClientMockRecorder struct {
	mock *MockEnpassClient
}

// NewMockEnpassClient creates a new mock instance.
func NewMockEnpassClient(ctrl *gomock.Controller) *MockEnpassClient {
	mock := &MockEnpassClient{ctrl: ctrl}
	mock.recorder = &MockEnpassClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnpassClient) EXPECT() *MockEnpassClientMockRecorder {
	return m.recorder
}

// GetEntries mocks base method.
func (m *MockEnpassClient) GetEntries(cardType string, filters []string) ([]enpass.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntries", cardType, filters)
	ret0, _ := ret[0].([]enpass.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntries indicates an expected call of GetEntries.
func (mr *MockEnpassClientMockRecorder) GetEntries(cardType, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntries", reflect.TypeOf((*MockEnpassClient)(nil).GetEntries), cardType, filters)
}

// GetEntry mocks base method.
func (m *MockEnpassClient) GetEntry(cardType string, filters []string, unique bool) (*enpass.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntry", cardType, filters, unique)
	ret0, _ := ret[0].(*enpass.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntry indicates an expected call of GetEntry.
func (mr *MockEnpassClientMockRecorder) GetEntry(cardType, filters, unique interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntry", reflect.TypeOf((*MockEnpassClient)(nil).GetEntry), cardType, filters, unique)
}

// MockEnpassCard is a mock of EnpassCard interface.
type MockEnpassCard struct {
	ctrl     *gomock.Controller
	recorder *MockEnpassCardMockRecorder
}

// MockEnpassCardMockRecorder is the mock recorder for MockEnpassCard.
type MockEnpassCardMockRecorder struct {
	mock *MockEnpassCard
}

// NewMockEnpassCard creates a new mock instance.
func NewMockEnpassCard(ctrl *gomock.Controller) *MockEnpassCard {
	mock := &MockEnpassCard{ctrl: ctrl}
	mock.recorder = &MockEnpassCardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnpassCard) EXPECT() *MockEnpassCardMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockEnpassCard) Decrypt() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockEnpassCardMockRecorder) Decrypt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockEnpassCard)(nil).Decrypt))
}
